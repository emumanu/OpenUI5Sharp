using System;
using Bridge;
using Retyped;
using System.Collections.Generic;

namespace UI5
{
	public partial class sap
	{
		public static partial class ui
		{
			public static partial class model
			{
				public static partial class analytics
				{
					/// <summary>
					/// Tree binding implementation for OData entity sets with aggregate semantics.
					/// 
					/// Note on the handling of different count modes: The AnalyticalBinding always uses the OData $inlinecount system query option to determine the total count of matching entities. It ignores the default count mode set in the ODataModel instance and the count mode specified in the binding parameters. If the default count mode is None, a warning is added to the log to remind the application that OData requests generated by the AnalyticalBinding will include a $inlinecount. If a count mode has been specified in the binding parameters, an error message will be logged if it is None, because the binding will still add the $inlinecount to OData requests. If a binding count mode is set to Request or Both, a warning will be logged to remind the application that the OData requests generated by the AnalyticalBinding will include a $inlinecount.
					/// </summary>
					[External]
					[Namespace(false)]
					[Name("sap.ui.model.analytics.AnalyticalBinding")]
					public partial class AnalyticalBinding : sap.ui.model.TreeBinding
					{
						#region Constructor

						/// <param name="oModel"></param>
						/// <param name="sPath">the path pointing to the tree / array that should be bound</param>
						/// <param name="oContext">the context object for this data binding</param>
						/// <param name="aSorter">predefined sorter/s contained in an array</param>
						/// <param name="aFilters">predefined filter/s contained in an array</param>
						/// <param name="mParameters">a map which contains additional control parameters.</param>
						public extern AnalyticalBinding(sap.ui.model.Model oModel, string sPath, object oContext, object[] aSorter, object[] aFilters, object mParameters);

						/// <param name="oModel"></param>
						/// <param name="sPath">the path pointing to the tree / array that should be bound</param>
						/// <param name="oContext">the context object for this data binding</param>
						/// <param name="aSorter">predefined sorter/s contained in an array</param>
						/// <param name="aFilters">predefined filter/s contained in an array</param>
						public extern AnalyticalBinding(sap.ui.model.Model oModel, string sPath, object oContext, object[] aSorter, object[] aFilters);

						/// <param name="oModel"></param>
						/// <param name="sPath">the path pointing to the tree / array that should be bound</param>
						/// <param name="oContext">the context object for this data binding</param>
						/// <param name="aSorter">predefined sorter/s contained in an array</param>
						public extern AnalyticalBinding(sap.ui.model.Model oModel, string sPath, object oContext, object[] aSorter);

						/// <param name="oModel"></param>
						/// <param name="sPath">the path pointing to the tree / array that should be bound</param>
						/// <param name="oContext">the context object for this data binding</param>
						public extern AnalyticalBinding(sap.ui.model.Model oModel, string sPath, object oContext);

						/// <param name="oModel"></param>
						/// <param name="sPath">the path pointing to the tree / array that should be bound</param>
						public extern AnalyticalBinding(sap.ui.model.Model oModel, string sPath);

						#endregion

						#region Methods

						/// <summary>
						/// Creates a new subclass of class sap.ui.model.analytics.AnalyticalBinding with name <code>sClassName</code> and enriches it with the information contained in <code>oClassInfo</code>.
						/// 
						/// <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.
						/// </summary>
						/// <param name="sClassName">Name of the class being created</param>
						/// <param name="oClassInfo">Object literal with information about the class</param>
						/// <param name="FNMetaImpl">Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code></param>
						/// <returns>Created class / constructor function</returns>
						public extern static object extend(string sClassName, object oClassInfo, object FNMetaImpl);

						/// <summary>
						/// Creates a new subclass of class sap.ui.model.analytics.AnalyticalBinding with name <code>sClassName</code> and enriches it with the information contained in <code>oClassInfo</code>.
						/// 
						/// <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.
						/// </summary>
						/// <param name="sClassName">Name of the class being created</param>
						/// <param name="oClassInfo">Object literal with information about the class</param>
						/// <returns>Created class / constructor function</returns>
						public extern static object extend(string sClassName, object oClassInfo);

						/// <summary>
						/// Creates a new subclass of class sap.ui.model.analytics.AnalyticalBinding with name <code>sClassName</code> and enriches it with the information contained in <code>oClassInfo</code>.
						/// 
						/// <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.
						/// </summary>
						/// <param name="sClassName">Name of the class being created</param>
						/// <returns>Created class / constructor function</returns>
						public extern static object extend(string sClassName);

						/// <summary>
						/// Sets filters for matching only a subset of the entities in the bound OData entity set.
						/// 
						/// Invoking this function resets the state of the binding. Subsequent data requests such as calls to getNodeContexts() will need to trigger OData requests in order to fetch the data that are in line with these filters.
						/// </summary>
						/// <param name="aFilter">an Array of sap.ui.model.Filter objects or a single Filter instance.</param>
						/// <param name="sFilterType">Type of the filter which should be adjusted.</param>
						/// <returns>returns <code>this</code> to facilitate method chaining</returns>
						public extern virtual sap.ui.model.analytics.AnalyticalBinding filter(Union<sap.ui.model.Filter[], sap.ui.model.Filter> aFilter, sap.ui.model.FilterType sFilterType = sap.ui.model.FilterType.Control);

						/// <summary>
						/// Gets the analytical information for a column with a given name.
						/// </summary>
						/// <param name="sColumnName">the column name.</param>
						/// <returns>analytical information for the column; see {@link #updateAnalyticalInfo} for an explanation of the object structure</returns>
						public extern virtual object getAnalyticalInfoForColumn(string sColumnName);

						/// <summary>
						/// Gets analytical metadata for the bound OData entity set.
						/// </summary>
						/// <returns>analytical metadata for the bound OData entity set</returns>
						public extern virtual sap.ui.model.analytics.odata4analytics.QueryResult getAnalyticalQueryResult();

						/// <summary>
						/// Gets details about the dimension properties included in the bound OData entity set.
						/// </summary>
						/// <returns>details for every dimension property addressed by its name. The details object provides these properties: name of the dimension, keyPropertyName for the name of the property holding the dimension key, textPropertyName for the name of the property holding the text for the dimension, aAttributeName listing all properties holding dimension attributes, grouped as indicator whether or not this dimension is currently grouped, and analyticalInfo, which contains the binding information for this dimension passed from the AnalyticalBinding's consumer via call to function updateAnalyticalInfo.</returns>
						public extern virtual Map getDimensionDetails();

						/// <summary>
						/// Get a download URL with the specified format considering the sort/filter/custom parameters.
						/// 
						/// The download URL also takes into account the selected dimensions and measures, depending on the given column definitions of the AnalyticalTable. This is based on the visible/inResult flags of the columns, as well as integrity dependencies, e.g. for mandatory Unit properties.
						/// </summary>
						/// <param name="sFormat">Value for the $format Parameter</param>
						/// <returns>URL which can be used for downloading</returns>
						public extern virtual string getDownloadUrl(string sFormat);

						/// <summary>
						/// Gets the names of the filterable properties in the bound OData entity set.
						/// </summary>
						/// <returns>names of properties that can be filtered.</returns>
						public extern virtual object[] getFilterablePropertyNames();

						/// <summary>
						/// Returns the filter information as an abstract syntax tree. Consumers must not rely on the origin information to be available, future filter implementations will not provide this information.
						/// </summary>
						/// <param name="bIncludeOrigin">whether to include information about the filter objects from which the tree has been created</param>
						/// <returns>The AST of the filter tree or null if no filters are set</returns>
						private extern object getFilterInfo(bool bIncludeOrigin = false);

						/// <summary>
						/// Gets a printable name for a group.
						/// 
						/// The printable name follows the pattern is <code>&lt;label&gt;:&lt;key-value&gt;[-&lt;text-value&gt;]</code>, where <code>label</code> is the label of the dimension property used at the aggregation level for the group, <code>key-value</code> is the key value of that dimension for the group, and <code>text-value</code> is the value of the associated text property, if it is also used in the binding.
						/// 
						/// Whenever a formatter function has been defined for a column displaying the key or text of this dimension, the return value of this function is applied for the group name instead of the respective key or text value.
						/// </summary>
						/// <param name="oContext">the parent context identifying the requested group.</param>
						/// <param name="iLevel">the level number of oContext (because the context might occur at multiple levels)</param>
						/// <returns>a printable name for the group.</returns>
						public extern virtual string getGroupName(sap.ui.model.Context oContext, int iLevel);

						/// <summary>
						/// Gets the total number of contexts contained in a group, if known.
						/// 
						/// For a given group, be aware that the group size might vary over time. In principle, this can happen if the bound set of OData entities includes measure properties with amount or quantity values. The AnalyticalBinding recognizes situations where the OData service returns multiple entries for a single group entry due to the fact that a measure property cannot be aggregated properly, because an amount exists in multiple currencies or a quantity exists in multiple units. In such situations, the AnalyticalBinding substitutes these entries by a single representative, and the group size gets reduced by the count of duplicate entries. Finally, since the Binding does not always fetch all children of a group at once, but only a page with a certain range, such size changes might happen after every page access.
						/// </summary>
						/// <param name="oContext">the parent context identifying the requested group of child contexts.</param>
						/// <param name="iLevel">the level number of oContext (because the context might occur at multiple levels)</param>
						/// <returns>The currently known group size, or -1, if not yet determined</returns>
						public extern virtual int getGroupSize(sap.ui.model.Context oContext, int iLevel);

						/// <summary>
						/// Gets details about the measure properties included in the bound OData entity set.
						/// </summary>
						/// <returns>details for every measure property addressed by its name. The details object provides these properties: name of the measure, rawValuePropertyName for the name of the property holding the raw value, unitPropertyName for the name of the property holding the related value unit or currency, if any, and analyticalInfo, which contains the binding information for this measure passed from the AnalyticalBinding's consumer via call to function updateAnalyticalInfo.</returns>
						public extern virtual Map getMeasureDetails();

						/// <summary>
						/// Returns a metadata object for class sap.ui.model.analytics.AnalyticalBinding.
						/// </summary>
						/// <returns>Metadata object describing this class</returns>
						[Name("getMetadata")]
						public extern static sap.ui.@base.Metadata getMetadataStatic();

						/// <summary>
						/// Gets child contexts for a specified parent context.
						/// 
						/// Contexts are returned in a stable order imposed by the dimension property that defines this aggregation level beneath the parent context: Either a sort order has been specified for this property, or the entries are returned in ascending order of the values of this dimension property by default.
						/// 
						/// If any of the requested data is missing, an OData request will be triggered to load it.
						/// </summary>
						/// <param name="mParameters">specifying the aggregation level for which contexts shall be fetched. Supported parameters are: <ul> <li>oContext: parent context identifying the requested group of child contexts</li> <li>level: level number for oContext, because it might occur at multiple levels; context with group ID <code>"/"</code> has level 0</li> <li>numberOfExpandedLevels: number of child levels that shall be fetched automatically</li> <li>startIndex: index of first child entry to return from the parent context (zero-based)</li> <li>length: number of entries to return; counting begins at the given start index</li> <li>threshold: number of additional entries that shall be locally available in the binding for subsequent accesses to child entries of the given parent context. </li> </ul></param>
						/// <returns>Array containing the requested contexts of class sap.ui.model.Context, limited by the number of entries contained in the entity set at that aggregation level. The array will contain less than the requested number of contexts, if some are not locally available and an OData request is pending to fetch them. In this case, if the parameter numberOfExpandedLevels > 0, the array will be completely empty.</returns>
						public extern virtual object[] getNodeContexts(Map mParameters);

						/// <summary>
						/// Gets the metadata of a property with a given name.
						/// </summary>
						/// <param name="sPropertyName">The property name.</param>
						/// <returns>OData metadata of this property or null if it does not exist.</returns>
						public extern virtual object getProperty(string sPropertyName);

						/// <summary>
						/// Gets the label of a property with a given name.
						/// </summary>
						/// <param name="sPropertyName">The property name.</param>
						/// <returns>The heading maintained for this property or null if it does not exist.</returns>
						public extern virtual string getPropertyHeading(string sPropertyName);

						/// <summary>
						/// Gets the label of a property with a given name.
						/// </summary>
						/// <param name="sPropertyName">The property name.</param>
						/// <returns>The label maintained for this property or null if it does not exist.</returns>
						public extern virtual string getPropertyLabel(string sPropertyName);

						/// <summary>
						/// Gets the quick info of a property with a given name.
						/// </summary>
						/// <param name="sPropertyName">The property name.</param>
						/// <returns>The quick info maintained for this property or null if it does not exist.</returns>
						public extern virtual string getPropertyQuickInfo(string sPropertyName);

						/// <summary>
						/// Gets the context for the root aggregation level representing the grand total for all bound measure properties.
						/// 
						/// The context is assigned to parent group ID <code>null</code>. If the binding is configured not to provide a grand total, this context is empty. If data for this context is not locally available yet, an OData request will be triggered to load it.
						/// 
						/// This function must be called whenever the bound set of OData entities changes, e.g., by changing selected dimensions, modifying filter conditions, etc.
						/// </summary>
						/// <param name="mParameters">specifying how the top-most aggregation level shall be fetched. Supported parameters are: <ul> <li>numberOfExpandedLevels: number of child levels that shall be fetched automatically</li> <li>startIndex: index of first entry to return from parent group ID <code>"/"</code> (zero-based)</li> <li>length: number of entries to return at and after the given start index</li> <li>threshold: number of additional entries that shall be locally available in the binding for subsequent accesses to contexts of parent group ID <code>"/"</code> or below, if auto-expanding is selected</li> </ul></param>
						/// <returns>Array with a single object of class sap.ui.model.Context for the root context, or an empty array if an OData request is pending to fetch requested contexts that are not yet locally available.</returns>
						public extern virtual object[] getRootContexts(Map mParameters);

						/// <summary>
						/// Gets the names of the sortable properties in the bound OData entity set.
						/// </summary>
						/// <returns>names of properties that can be used for sorting the result entities.</returns>
						public extern virtual object[] getSortablePropertyNames();

						/// <summary>
						/// Gets the total number of entities in the bound OData entity set.
						/// 
						/// Counting takes place at the lowest aggregation level defined by the possible value combinations for the complete set of dimension properties included in the bound entity set. This means that intermediate aggregate entities with sub-totals at higher aggregation levels are not counted.
						/// </summary>
						/// <returns>the total number of addressed entities in the OData entity set</returns>
						public extern virtual int getTotalSize();

						/// <summary>
						/// Determines if the binding has the entries of a given aggregation level locally available.
						/// 
						/// If so, no further OData request is required to fetch any of them.
						/// </summary>
						/// <param name="oContext">the parent context identifying the aggregation level.</param>
						/// <param name="iLevel">the level number of oContext (because the context might occur at multiple levels).</param>
						/// <returns>property of sap.ui.model.analytics.AnalyticalBinding.ContextsAvailabilityStatus, indicating whether all, some, or none of the entries are locally available.</returns>
						public extern virtual bool hasAvailableNodeContexts(sap.ui.model.Context oContext, int iLevel);

						/// <summary>
						/// Determines if the contexts in a specified group have further children. If so, any of these group contexts can be a parent context of a nested sub-group in a subsequent aggregation level.
						/// </summary>
						/// <param name="oContext">the parent context identifying the requested group of child contexts.</param>
						/// <param name="mParameters">The only supported parameter is level as the level number of oContext (because the context might occur at multiple levels)</param>
						/// <returns>true if and only if the contexts in the specified group have further children.</returns>
						public extern virtual bool hasChildren(sap.ui.model.Context oContext, Map mParameters);

						/// <summary>
						/// Determines if any of the properties included in the bound OData entity set is a measure property.
						/// </summary>
						/// <returns>true if and only one or more properties are measure properties.</returns>
						public extern virtual bool hasMeasures();

						/// <summary>
						/// Determines if a given name refers to a measure property
						/// </summary>
						/// <param name="sPropertyName">The property name.</param>
						/// <returns>true if and only if the bound OData entity set includes a measure property with this name.</returns>
						public extern virtual bool isMeasure(string sPropertyName);

						/// <summary>
						/// Loads child contexts of multiple groups.
						/// </summary>
						/// <param name="mGroupIdRanges">specifies index ranges of child contexts to be loaded for multiple groups identified by their ID. A group index range is given by an object consisting of startIndex, length, threshold. For every group ID, the map holds an array of such range objects.</param>
						public extern virtual void loadGroups(Map mGroupIdRanges);

						/// <summary>
						/// Determines if the binding has been configured to provide a grand total for the selected measure properties.
						/// </summary>
						/// <returns>true if and only if the binding provides a context for the grand totals of all selected measure properties.</returns>
						public extern virtual bool providesGrandTotal();

						/// <summary>
						/// Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For service side models this should refetch the data from the service. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter bForceUpdate.
						/// </summary>
						/// <param name="bForceUpdate">Update the bound control even if no data has been changed</param>
						public extern virtual void refresh(bool bForceUpdate);

						/// <summary>
						/// Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For service side models this should refetch the data from the service. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter bForceUpdate.
						/// </summary>
						public extern virtual void refresh();

						/// <summary>
						/// Sets sorters for retrieving the entities in the bound OData entity set in a specific order.
						/// 
						/// Invoking this function resets the state of the binding. Subsequent data requests such as calls to getNodeContexts() will need to trigger OData requests in order to fetch the data that are in line with these sorters.
						/// </summary>
						/// <param name="aSorter">a sorter object or an array of sorter objects which define the sort order.</param>
						/// <returns>returns <code>this</code> to facilitate method chaining.</returns>
						public extern virtual sap.ui.model.analytics.AnalyticalBinding sort(Union<sap.ui.model.Sorter, object[]> aSorter);

						/// <summary>
						/// Updates the binding's structure with new analytical information.
						/// 
						/// Analytical information is the mapping of UI columns to properties in the bound OData entity set. Every column object contains the name of the bound property and in addition: <ol> <li>A column bound to a dimension property has further boolean properties: <ul> <li>grouped: dimension will be used for building groups</li> <li>visible: if the column is visible, values for the related property will be fetched from the OData service</li> <li>inResult: if the column is not visible, but declared to be part of the result, values for the related property will also be fetched from the OData service</li> </ul> </li> <li>A column bound to a measure property has further boolean properties: <ul> <li>total: totals and sub-totals will be provided for the measure at all aggregation levels</li> </ul> </li> <li>A column bound to a hierarchy property has further properties: <ul> <li>grouped: boolean value; indicates whether the hierarchy will be used for building groups</li> <li>level: integer value; the hierarchy level is mandatory for at least one of those columns that represent the same hierarchy.</li> </ul> </li> </ol>
						/// 
						/// Invoking this function resets the state of the binding and subsequent data requests such as calls to getNodeContexts() will need to trigger OData requests in order to fetch the data that are in line with this analytical information.
						/// 
						/// Please be aware that a call of this function might lead to additional back-end requests, as well as a control re-rendering later on. Whenever possible use the API of the analytical control, instead of relying on the binding.
						/// </summary>
						/// <param name="aColumns">an array with objects holding the analytical information for every column, from left to right.</param>
						public extern virtual void updateAnalyticalInfo(object[] aColumns);

						#endregion

					}
				}
			}
		}
	}
}
